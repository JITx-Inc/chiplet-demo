; Generated by JITX 1.1.2-rc.3
#use-added-syntax(jitx)
defpackage chiplet-system :
  import core
  import jitx
  import jitx/commands
  import ocdb/utils/checks
  import ocdb/utils/generic-components

  import ocdb/utils/bundles

  import ucie-utils
  import bow-utils
; ==========================================
; Implement other modules used by our design 
; ==========================================
pcb-bundle system-io :
  port jtag : jtag()
  port ddr4 : diff-pair

pcb-module compute-chiplet :
  port system-io : system-io
  port ucie : UCIe-interface(UCIe-Advanced)

  inst bamps : ucie-module(UCIe-Advanced, 9.0e-1)
  place(bamps) at loc(0.0, 0.0) on Top
  net (bamps.ucie ucie)


  property(self.thickness) = 0.5
  property(self.shape) = Rectangle(5.0, 5.0)
  property(self.PDK) = "Intel-18A"
  property(self.RTL) = "compute.vl" ; some model - composed of smaller models

; pcb-module graphics-chiplet () :
;   manufacturer          = "Intel"

; pcb-component hub-chiplet () :
;   manufacturer          = "Intel"


pcb-module interposer :
  inst compute : compute-chiplet
  inst graphics : compute-chiplet

  net (compute.ucie graphics.ucie)



; pcb-module chiplet-system (Package:True|False):

;   port package-jtag : jtag
;   port memory : DDR4

;   ; z-stacking
;   inst base : interposer
;   inst hub : hub-chiplet
;   inst compute : compute-chiplet
;   inst graphics : graphics-chiplet

;   ; place(base) and everything else.

;   ; width is known - could vary in number
;   net-through(base, compute.ucie graphics.ucie); Has pre-defined bump map
;   net-through(base, compute.jtag package-jtag) ; Has pre-defined bump map
;   net-through(base, hub.ddr4 memory) ; JEDEC - has bump map for DDR4

;   if Package:
;     inst balls : bga-pattern
;     net (package-jtag balls.jtag)

; make-design(chiplet-system(False))

; pcb-module board :
;   inst package : chiplet-system(True)
;   inst memory : dimms

;   net (package.DDR4 memory.DDR4)
  ;  Other board components. Power, etc...

; When you run this:
;  - Design creation - look at schematics (package and board), bump patterns for chiplets
;  - Analysis (right now created in parallel -- new: need to have a common definition of the truth) Need story for all players in the design/analysis space.
    ; - Performance - Cycle accurate simulator. 

; Challenges
; - We built tool for boards
; - Don't have our own performance simulator, thermal engine. Would have to be connected up.

  
; =========================
; Module to run as a design
; ==========================
val board-shape = RoundedRectangle(30.0, 18.5, 0.25)
pcb-module my-design :

  inst version-label  : ocdb/artwork/board-text/version-silkscreen("Version 0.0")
  place(version-label) at loc(0.0, height(board-shape) / 2.0 - 1.0) on Bottom
  
; ==========================================
; Configure the design, then run or check it
; ==========================================
defn run-design (circuit:Instantiable, run-checks?:True|False) :
  set-design-directory("CAD")
  set-board(ocdb/utils/defaults/default-board(ocdb/manufacturers/stackups/jlcpcb-jlc2313, board-shape))
  set-rules(ocdb/manufacturers/rules/jlcpcb-rules)

  var main-module = circuit
  if run-checks? :
    main-module = ocdb/utils/generator-utils/run-final-passes(circuit) ; Analyze design with a pass
  
  set-main-module(main-module) ; Treat the provided module as a design, and compile it.
  
  if run-checks? :
    run-checks("checks.txt")
  else:  
    view-board()
    view-schematic()

; ====================================
; Compile the design, view the results
; ====================================
defn compile-design (circuit:Instantiable) :
  run-design(circuit, false)

; =====================
; Run the design checks
; =====================
defn check-design (circuit:Instantiable) :
  run-design(circuit, true)

; ====================
; Export design to CAD
; ====================
defn export-design () :
  set-paper(ANSI-A4)
  set-export-backend(`altium)
  export-cad()

; ===================================
; Update CAD, keeping layout progress
; ===================================
defn update-design () :
  set-export-board?(false)
  export-design()

; =================
; Export BOM to tsv
; =================
defn export-bill-of-materials () :
  set-bom-vendors(ocdb/utils/design-vars/APPROVED-DISTRIBUTOR-LIST)
  set-bom-design-quantity(ocdb/utils/design-vars/DESIGN-QUANTITY)
  export-bom()

; ============
; Run the code
; ============
compile-design(interposer)
