; Generated by JITX 1.1.2-rc.3
#use-added-syntax(jitx)
defpackage chiplet-system :
  import core
  import jitx
  import jitx/commands
  import ocdb/utils/checks
  import ocdb/utils/generic-components

  import ocdb/utils/bundles

  import ocdb/utils/landpatterns
  import ocdb/utils/box-symbol
  
  import ucie-utils
  import bow-utils

; ==========================================
; Implement other modules used by our design 
; ==========================================

pcb-bundle system-io :
  port jtag : jtag()
  ; TODO upgrade to real DDR4 interface
  port ddr4 : diff-pair

pcb-module compute-chiplet :
  port system-io : system-io
  port ucie : UCIe-interface(UCIe-Advanced)

  inst uclane : ucie-module(UCIe-Advanced, 9.0e-2)
  net (uclane.ucie ucie)

  inst hublane : ucie-module(UCIe-Advanced, 9.0e-2)
  net (hublane.ucie ucie)

  inst jtag-interface : io-block(jtag(), 9.0e-2)
  net (jtag-interface.io system-io.jtag)


  place(uclane) at loc(0.0, 0.0) on Top
  place(hublane) at loc(2.0, 0.0) on Top
  place(jtag-interface) at loc(-2.0, 0.0) on Top

  property(self.shape) = Rectangle(5.0, 5.0)
  property(self.thickness) = 0.5
  property(self.PDK) = "Intel-18A"
  property(self.RTL) = "compute.vl" ; some model - composed of smaller models
  layer(Courtyard(Top)) = property(self.shape)
  schematic-group(uclane) = compute-1
  schematic-group(hublane) = compute-2

pcb-module graphics-chiplet :
  port system-io : system-io
  port ucie : UCIe-interface(UCIe-Advanced)

  inst uclane : ucie-module(UCIe-Advanced, 7.0e-2)
  place(uclane) at loc(0.0, 0.0) on Top
  net (uclane.ucie ucie)

  property(self.thickness) = 0.5
  property(self.shape) = Rectangle(5.0, 5.0)
  property(self.PDK) = "Intel-4"
  property(self.RTL) = "graphics.vl" ; some model - composed of smaller models
  layer(Courtyard(Top)) = property(self.shape)
  schematic-group(self) = graphics

pcb-module hub-chiplet :
  port system-io : system-io
  port ucie : UCIe-interface(UCIe-Advanced)

  inst uclane : ucie-module(UCIe-Advanced, 7.0e-2)
  place(uclane) at loc(0.0, 0.0) on Top
  net (uclane.ucie ucie)

  ; TODO upgrade to real DDR4 interface
  inst ddr-interface : io-block(diff-pair, 9.0e-2)
  place(ddr-interface) at loc(-2.0, 0.0) on Top
  net (ddr-interface.io system-io.ddr4)

  property(self.thickness) = 0.5
  property(self.shape) = Rectangle(5.0, 5.0)
  property(self.PDK) = "Intel-4"
  property(self.RTL) = "hub.vl" ; some model - composed of smaller models
  layer(Courtyard(Top)) = property(self.shape)
  schematic-group(self) = hub

pcb-landpattern interposer-lp (pitch:Double, side:Side):
  pcb-pad square-pad :
    type = SMD
    shape = Rectangle(pitch / 2.0, pitch / 2.0)
  for (l in grid-locs(20, 20, pitch, pitch), i in 0 to false) do :
    pad p[i] : square-pad at l on side

pcb-component interposer-package-interface (pitch:Double, side:Side):
  port system-io : system-io
  val land = interposer-lp(pitch, side)
  pin-properties :
    [ pin : Ref | pads : Ref ... | side:Dir ]
    for (p in pins(system-io), pa in pads(land)) do :
      [ (ref(p))   | (ref(pa))           | Left ]
  assign-landpattern(land)
  make-box-symbol()    
  
pcb-module interposer :
  port system-io : system-io

  inst compute : compute-chiplet
  inst graphics : graphics-chiplet
  inst hub : hub-chiplet

  net (compute.ucie graphics.ucie)
  net (compute.ucie hub.ucie)

  inst package-interface : interposer-package-interface(0.2, Bottom)
  net (package-interface.system-io compute.system-io graphics.system-io hub.system-io system-io)

  place(package-interface) at loc(0.0, 0.0) on Top

pcb-landpattern package-lp (pitch:Double, side:Side):
  pcb-pad square-pad :
    type = SMD
    shape = Circle(pitch / 4.0)
  for (l in grid-locs(20, 20, pitch, pitch), i in 0 to false) do :
    pad p[i] : square-pad at l on side

pcb-component package-board-interface (pitch:Double, side:Side):
  port system-io : system-io
  val land = package-lp(pitch, side)
  pin-properties :
    [ pin : Ref | pads : Ref ... | side:Dir ]
    for (p in pins(system-io), pa in pads(land)) do :
      [ (ref(p))   | (ref(pa))           | Left ]
  assign-landpattern(land)
  make-box-symbol()    

pcb-module package :
  port system-io : system-io

  inst interposer-interface : interposer-package-interface(0.2, Top)
  inst board-interface : package-board-interface(0.6, Bottom)
  net (system-io board-interface.system-io interposer-interface.system-io)

  place(interposer-interface) at loc(0.0, 0.0) on Top
  place(board-interface) at loc(0.0, 0.0) on Top

pcb-module board :
  port system-io : system-io

  inst board-interface : package-board-interface(0.6, Top)
  net (system-io board-interface.system-io)

; When you run this:
;  - Design creation - look at schematics (package and board), bump patterns for chiplets
;  - Analysis (right now created in parallel -- new: need to have a common definition of the truth) Need story for all players in the design/analysis space.
    ; - Performance - Cycle accurate simulator. 

; Challenges
; - We built tool for boards
; - Don't have our own performance simulator, thermal engine. Would have to be connected up.

  
; =========================
; Module to run as a design
; ==========================
val board-shape = RoundedRectangle(30.0, 18.5, 0.25)
pcb-module my-design :

  inst version-label  : ocdb/artwork/board-text/version-silkscreen("Version 0.0")
  place(version-label) at loc(0.0, height(board-shape) / 2.0 - 1.0) on Bottom
  
; ==========================================
; Configure the design, then run or check it
; ==========================================
defn run-design (circuit:Instantiable, run-checks?:True|False) :
  set-design-directory("CAD")
  set-board(ocdb/utils/defaults/default-board(ocdb/manufacturers/stackups/jlcpcb-jlc2313, board-shape))
  set-rules(ocdb/manufacturers/rules/jlcpcb-rules)

  var main-module = circuit
  if run-checks? :
    main-module = ocdb/utils/generator-utils/run-final-passes(circuit) ; Analyze design with a pass
  
  set-main-module(main-module) ; Treat the provided module as a design, and compile it.
  
  if run-checks? :
    run-checks("checks.txt")
  else:  
    view-board()
    view-schematic()

; ====================================
; Compile the design, view the results
; ====================================
defn compile-design (circuit:Instantiable) :
  run-design(circuit, false)

; =====================
; Run the design checks
; =====================
defn check-design (circuit:Instantiable) :
  run-design(circuit, true)

; ====================
; Export design to CAD
; ====================
defn export-design () :
  set-paper(ANSI-A4)
  set-export-backend(`altium)
  export-cad()

; ===================================
; Update CAD, keeping layout progress
; ===================================
defn update-design () :
  set-export-board?(false)
  export-design()

; =================
; Export BOM to tsv
; =================
defn export-bill-of-materials () :
  set-bom-vendors(ocdb/utils/design-vars/APPROVED-DISTRIBUTOR-LIST)
  set-bom-design-quantity(ocdb/utils/design-vars/DESIGN-QUANTITY)
  export-bom()

; ============
; Run the code
; ============
compile-design(board)
