; Generated by JITX 1.1.2-rc.3
#use-added-syntax(jitx)
defpackage chiplet-system :
  import core
  import jitx
  import jitx/commands
  import ocdb/utils/checks
  import ocdb/utils/generic-components

  import ocdb/utils/bundles
  import ocdb/utils/connects

  import ocdb/utils/landpatterns
  import ocdb/utils/box-symbol
  
  import ucie-utils
  import bow-utils

  import DDR4-bundle
  import DDR4-dimm

; ================================
; Collection of system connections
; ================================
pcb-bundle system-io :
  port jtag : jtag()
  port ddr4 : DDR4-interface
  port sys-i2c : i2c

; ================================
; Chiplet definitions
; ================================
pcb-module compute-chiplet :
  port system-io : system-io
  port ucie : UCIe-interface(UCIe-Advanced)

  inst uclane : ucie-module(UCIe-Advanced, 22.0e-3)
  net (uclane.ucie ucie)

  inst hublane : ucie-module(UCIe-Advanced, 22.0e-3)
  net (hublane.ucie ucie)

  inst jtag-interface : io-block(jtag(), 55.0e-3)
  net (jtag-interface.io system-io.jtag)

  place(uclane) at loc(1.0, 0.0) on Top
  place(hublane) at loc(-0.75, 0.0) on Top
  place(jtag-interface) at loc(-0.0, 0.0) on Top

  property(self.shape) = Rectangle(2.0, 2.0)
  property(self.thickness) = 0.5
  property(self.PDK) = "Intel-18A"
  property(self.RTL) = "compute.vl" ; some model - composed of smaller models
  layer(Courtyard(Top)) = property(self.shape)
  schematic-group(uclane) = compute-1
  schematic-group(hublane) = compute-2

pcb-module graphics-chiplet :
  port system-io : system-io
  port ucie : UCIe-interface(UCIe-Advanced)
  port bow : bunch-of-wires-link(8, 8)

  inst uclane : ucie-module(UCIe-Advanced, 22.0e-3)
  place(uclane) at loc(1.0, 0.0) on Top
  net (uclane.ucie ucie)

  inst bow-lane : bunch-of-wires-link-bumps(8, 8, 4, 22.0e-3, false)
  place(bow-lane) at loc(0.0, -0.75, 180.0) on Top
  net (bow-lane.io bow)

  property(self.thickness) = 0.5
  property(self.shape) = Rectangle(2.0, 2.0)
  property(self.PDK) = "Intel-4"
  property(self.RTL) = "graphics.vl" ; some model - composed of smaller models
  layer(Courtyard(Top)) = property(self.shape)
  schematic-group(self) = graphics

pcb-module hub-chiplet :
  port system-io : system-io
  port ucie : UCIe-interface(UCIe-Advanced)

  inst uclane : ucie-module(UCIe-Advanced, 22.0e-3)
  place(uclane) at loc(-0.75, 0.0) on Top
  net (uclane.ucie ucie)

  inst ddr-interface : io-block(DDR4-interface, 22.0e-3)
  place(ddr-interface) at loc(0.0, 0.0) on Top
  net (ddr-interface.io system-io.ddr4)

  inst i2c-interface : io-block(i2c, 22.0e-3)
  place(i2c-interface) at loc(0.0, 0.5) on Top
  net (i2c-interface.io system-io.sys-i2c)

  property(self.thickness) = 0.5
  property(self.shape) = Rectangle(2.0, 2.0)
  property(self.PDK) = "Intel-4"
  property(self.RTL) = "hub.vl" ; some model - composed of smaller models
  layer(Courtyard(Top)) = property(self.shape)
  schematic-group(self) = hub

pcb-module accelerator-chiplet :
  port system-io : system-io
  port bow : bunch-of-wires-link(8, 8)

  inst bow-lane : bunch-of-wires-link-bumps(8, 8,  4, 22.0e-3, true)
  place(bow-lane) at loc(0.0, 0.25) on Top
  net (bow-lane.io bow)

  property(self.thickness) = 0.5
  property(self.shape) = Rectangle(2.0, 1.0)
  property(self.PDK) = "Intel-4"
  property(self.RTL) = "xl.vl" ; some model - composed of smaller models
  layer(Courtyard(Top)) = property(self.shape)
  schematic-group(self) = accelerator


; ================================
; Interposer definition
; ================================

pcb-landpattern interposer-lp (pitch:Double, side:Side):
  pcb-pad square-pad :
    type = SMD
    shape = Rectangle(pitch / 2.0, pitch / 2.0)
  for (l in grid-locs(20, 20, pitch, pitch), i in 0 to false) do :
    pad p[i] : square-pad at l on side

pcb-component interposer-package-interface (pitch:Double, side:Side):
  port system-io : system-io
  val land = interposer-lp(pitch, side)
  pin-properties :
    [ pin : Ref | pads : Ref ... | side:Dir ]
    for (p in pins(system-io), pa in pads(land)) do :
      [ (ref(p))   | (ref(pa))           | Left ]
  assign-landpattern(land)
  make-box-symbol()    
  
pcb-module interposer :
  port system-io : system-io

  inst compute : compute-chiplet
  inst graphics : graphics-chiplet
  inst hub : hub-chiplet
  inst accelerator : accelerator-chiplet

  net (compute.ucie graphics.ucie)
  net (compute.ucie hub.ucie)
  connect-bunch-of-wires(graphics.bow accelerator.bow)

  inst package-interface : interposer-package-interface(300.0e-3, Bottom)
  net (package-interface.system-io compute.system-io graphics.system-io hub.system-io system-io)

  place(compute) at loc(0.0, 0.0) on Top
  place(graphics) at loc(-3.0, -0.5) on Top
  place(accelerator) at loc(-3.0, -2.5) on Top
  place(hub) at loc(3.0, -0.5) on Top
  place(package-interface) at loc(0.0, 0.0) on Top
  property(self.shape) = Rectangle(8.0, 7.0)


; ================================
; Package definition
; ================================

pcb-landpattern package-lp (pitch:Double, side:Side):
  pcb-pad square-pad :
    type = SMD
    shape = Circle(pitch / 4.0)
  for (l in grid-locs(20, 20, pitch, pitch), i in 0 to false) do :
    pad p[i] : square-pad at l on side
  layer(Courtyard(Top)) = Rectangle(20.0 * pitch, 20.0 * pitch)

pcb-component package-board-interface (pitch:Double, side:Side):
  port system-io : system-io
  val land = package-lp(pitch, side)
  pin-properties :
    [ pin : Ref | pads : Ref ... | side:Dir ]
    for (p in pins(system-io), pa in pads(land)) do :
      [ (ref(p))   | (ref(pa))           | Left ]
  assign-landpattern(land)
  make-box-symbol()    

pcb-module package :
  port system-io : system-io

  inst interposer-interface : interposer-package-interface(0.2, Top)
  inst board-interface : package-board-interface(0.6, Bottom)
  net (system-io board-interface.system-io interposer-interface.system-io)

  place(interposer-interface) at loc(0.0, 0.0) on Top
  place(board-interface) at loc(0.0, 0.0) on Top
  property(self.shape) = RoundedRectangle(13.0, 13.0, 0.25)
  schematic-group(interposer-interface) = interposer
  schematic-group(board-interface) = board


; ================================
; Board definitions
; ================================

pcb-module board :
  port system-io : system-io

  inst IntelProc : package-board-interface(0.6, Top)
  net (system-io IntelProc.system-io)

  net GND ()

  inst dimm : DDR4-dimm/component[4]
  for i in 0 to 4 do:
    place(dimm[i]) at loc(0.0, to-double(i) * 9.0) on Top
    require ddr : DDR4-interface from dimm[i]
    net (system-io.ddr4 ddr)
    net (dimm[0].VDD dimm[i].VDD)
    net (dimm[0].VPP dimm[i].VPP)
    net (GND dimm[i].VSS)
    schematic-group(dimm[i]) = (Ref(to-string("DIMM-%_" % [i])))

  inst P1V8 : components/ADP3336ARMZ/module(1.8)
  inst P3V3 : components/ADP3336ARMZ/module(3.3)

  inst J1 : ocdb/components/belfuse/SS-52400-003/component
  inst USB-PD : components/STUSB4500QTR/module ; USB-C PD device
  net (J1.vbus USB-PD.Vbus)
  net (J1.CC1 USB-PD.CC1)
  net (J1.CC2 USB-PD.CC2)

  require ctrl:i2c from USB-PD.U1
  net (system-io.sys-i2c ctrl)

  inst flash : components/AT25SL321-U/module

  place(IntelProc) at loc(0.0, -15.0) on Top
  property(self.shape) = RoundedRectangle(200.0, 70.0, 1.0)

  
; ==========================================
; Configure the design, then run or check it
; ==========================================
defn run-design (circuit:Instantiable, run-checks?:True|False) :
  set-current-design("chiplet-design-output")
  set-board(ocdb/utils/defaults/default-board(ocdb/manufacturers/stackups/jlcpcb-jlc2313, property(circuit.shape)))
  set-rules(ucie-rules/intel-build-up)

  var main-module = circuit
  if run-checks? :
    main-module = ocdb/utils/generator-utils/run-final-passes(circuit) ; Analyze design with a pass
  
  set-main-module(main-module) ; Treat the provided module as a design, and compile it.
  
  if run-checks? :
    run-checks("checks.txt")
  else:  
    view-board()
    view-schematic()

; ====================================
; Compile the design, view the results
; ====================================
defn compile-design (circuit:Instantiable) :
  run-design(circuit, false)

; =====================
; Run the design checks
; =====================
defn check-design (circuit:Instantiable) :
  run-design(circuit, true)

; ====================
; Export design to CAD
; ====================
defn export-design () :
  set-paper(ANSI-A4)
  set-export-backend(`altium)
  export-cad()

; ===================================
; Update CAD, keeping layout progress
; ===================================
defn update-design () :
  set-export-board?(false)
  export-design()

; =================
; Export BOM to tsv
; =================
defn export-bill-of-materials () :
  set-bom-vendors(ocdb/utils/design-vars/APPROVED-DISTRIBUTOR-LIST)
  set-bom-design-quantity(ocdb/utils/design-vars/DESIGN-QUANTITY)
  export-bom()

; ============
; Run the code
; ============
compile-design(compute-chiplet)
