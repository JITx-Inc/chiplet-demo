#use-added-syntax(jitx)
defpackage clock-fanout-jumper-select :
  import core
  import math
  import collections
  import jitx
  import jitx/commands
  import ocdb/defaults
  import ocdb/generic-components
  import ocdb/bundles
  import ocdb/land-patterns
  import ocdb/design-vars
  import ocdb/generator-utils
  import ocdb/checks
  import ocdb/box-symbol
  import ocdb/symbols
  import ocdb/tolerance
  import utils/time

public pcb-module clock-fanout-jumper-select (n:Int) :
  port vin : power
  inst b : buffer-fanout(n)
  inst j : pull-up-jumper(n + 2)

  inst b-i : SN74LVC1G125/component[2]
  inst ext-sys-clk : sma-wrapper
  inst int-sys-clk : si-SiT8208-cmp
  inst r : gen-res-cmp(1.0e3)
  inst c : gen-cap-cmp(0.1)[3]

  net (vin, b.vin, j.vin)
  net (vin.neg, ext-sys-clk.gnd, int-sys-clk.GND, b-i[0].vs-, b-i[1].vs-, c[0].p[1], c[1].p[1], c[2].p[1])
  net (vin.pos, int-sys-clk.VDD, b-i[0].vs+, b-i[1].vs+, r.p[0], c[0].p[0], c[1].p[0], c[2].p[0])
  short-trace(int-sys-clk.VDD, c[0].p[0])
  short-trace(b-i[0].vs+, c[1].p[0])
  short-trace(b-i[1].vs+, c[2].p[0])
  net (r.p[1], int-sys-clk.OE)

  net CLK-50MHz-EXT (ext-sys-clk.sig)
  net CLK-50MHz-INT (int-sys-clk.OUT)

  for i in 0 to n do :
    net (j.p[i], b.en[i])

  net (b-i[0].y, b-i[1].y, b.in)
  net (b-i[0].a, ext-sys-clk.sig)
  net (b-i[1].a, int-sys-clk.OUT)

  for i in 0 to 2 do : 
    net (b-i[i].oe, j.p[i + n])
