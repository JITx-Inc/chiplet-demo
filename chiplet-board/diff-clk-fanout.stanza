#use-added-syntax(jitx)
defpackage diff-clk-fanout :
  import core
  import math
  import collections
  import jitx
  import jitx/commands
  import ocdb/defaults
  import ocdb/generic-components
  import ocdb/bundles
  import ocdb/land-patterns
  import ocdb/design-vars
  import ocdb/generator-utils
  import ocdb/checks
  import ocdb/box-symbol
  import ocdb/symbols
  import ocdb/tolerance
  import utils/time

public pcb-module diff-clk-fanout (n:Int) :
  port clkin : diff-pair
  port clkout : diff-pair[n]
  port vcc : power

  val n-chips = (n + 2 - 1) / 2

  inst b : si53342/component[n-chips]
  inst c : gen-cap-cmp(1.0e-6)[n-chips]
  inst j : samtec-tsm/component(n * 2)
  ;val g-count = to-seq(0 to false)  
  for (i in 0 to n, n-idx in 0 to false) do :
    ;val n-idx = next(g-count)
    val g-name = Ref("CLK-%_-EN" % [n-idx])
    val [chip-idx, chip-ref, buffer-idx] = [i / 2, b[i / 2], i % 2]
    if buffer-idx == 0 :
      net (clkin.D_P, chip-ref.CLK0)
      net (clkin.D_N, chip-ref.CLK0b)
      net (chip-ref.pad, vcc.neg, c[chip-idx].p[1])
      net (chip-ref.VDD, chip-ref.VDDOA, chip-ref.VDDOB, vcc.pos, c[chip-idx].p[0])
      short-trace(chip-ref.VDD, c[chip-idx].p[0])
      net (chip-ref.Q2, clkout[i].D_P)
      net (chip-ref.Q2b, clkout[i].D_N)
      net g-name (j.p[i * 2], chip-ref.OEAb)
    else :
      net (chip-ref.Q3, clkout[i].D_P)
      net (chip-ref.Q3b, clkout[i].D_N)
      net g-name (j.p[i * 2], chip-ref.OEBb)
    net (j.p[i * 2 + 1], vcc.pos)