#use-added-syntax(jitx)
defpackage chiplet-board :
  import core
  import collections
  import math
  import jitx
  import jitx/commands
  import ocdb/defaults
  import ocdb/generic-components
  import ocdb/bundles
  import ocdb/land-patterns
  import ocdb/design-vars
  import ocdb/generator-utils
  import ocdb/checks
  import ocdb/box-symbol
  import ocdb/symbols
  import ocdb/tolerance

;==== Bundles ===================================================================

public pcb-bundle pmb :
  pin clk
  pin dat

public pcb-bundle chips-bank :
  pin AIB_A_CONFIG_DONE
  pin AIB_A_TEST_IN
  pin AIB_A_TEST_OUT
  pin AIB_B_CONFIG_DONE
  pin AIB_B_TEST_IN
  pin AIB_B_TEST_OUT
  pin LVDS_REXT
  pin OSC_A_DIV_CLK
  pin OSC_B_DIV_CLK
  pin RESET_N
  pin SYS_CLK

;==== Parts ===================================================================


;==== Components ===================================================================


;==== Modules ===================================================================

pcb-module pull-up-jumper (n:Int) :
  port vin : power
  port p : pin[n]
  inst berg : samtec-tsm/component(n * 2)
  place(berg) at loc(0.0, 0.0) on Top
  inst r-pu : gen-res-cmp(10.0e3)[n]

  for i in 0 to n do :
    net (berg.p[i * 2], r-pu[i].p[1], p[i])
    net (r-pu[i].p[2], vin.vdd)
    net (berg.p[i * 2 + 1], vin.gnd)

pcb-module level-shifter :
  ; Bidirectional level shifter suitable for steps up/down in 1.8V to 5V range
  pin pwr-hv    ; Higher voltage power rail
  pin pwr-lv    ; Lower voltage power rail
  pin sig-hv    ; Higher voltage signal
  pin sig-lv    ; Lower voltage signal
 
  inst fet : SSM3K35CTC/component
  inst r-pu : gen-res-cmp(2700.0)[2]

  net (pwr-hv, r-pu[0].p[1])
  net (sig-hv, r-pu[0].p[2], fet.d)
  net (pwr-lv, r-pu[1].p[1], fet.g)
  net (sig-lv, r-pu[1].p[2], fet.s)


public pcb-module buffer-fanout (n:Int) :
  port en : pin[n]
  pin in
  port out : pin[n]
  port vin : power
  inst b : SN74LVC1G125/component[n]
  inst c : gen-cap-cmp(0.1e-6)[n]
  
  for (i in 0 to n, n-idx in 0 to false) do :
    net (vin.gnd, b[i].vs-, c[i].p[2])
    net (vin.vdd, b[i].vs+, c[i].p[2])
    short-trace( b[i].vs+, c[i].p[2])
    ; net Ref("CLK-%_-IN" % [n-idx]) (in, b[i].a)
    net (in, b[i].a)
    net (out[i], b[i].y)
    ; net Ref("CLK-%_-IN" % [n-idx]) (in, b[i].a)
    net (in, b[i].a)

public pcb-module power-indicator-led (voltage:Double) :
  port rail : power
  ; 2ma curent, forward voltage = 1.8
  inst l : LG-L29K-F2J1-24/component

  if voltage < 3.3 :
    port pow3v3 : power
    inst npn : ocdb/nexperia/PMBT3904/component
    inst r-b : gen-res-cmp(1.0e3)
    val r-val = (3.3 - 1.8) / 2.0e-3
    inst r : gen-res-cmp(r-val)
    net (rail.vdd, r-b.p[1])
    net (npn.b, r-b.p[2])
    net (r.p[1], npn.c)     
    net (r.p[2], l.c)
    net (l.a, pow3v3.vdd)
    net (npn.e, pow3v3.gnd, rail.gnd)
  else :
    val r-val = (voltage - 1.8) / 2.0e-3
    inst r : gen-res-cmp(r-val)
    net (r.p[1], rail.gnd)    
    net (r.p[2], l.c)
    net (l.a, rail.vdd)

pcb-module power-conditioning (voltage:Double, fuse:Double) :
  port src : power
  port dst : power
  inst f : LITTLEFUSE157DR/component(fuse)
  inst tvs : VISHAY-SMBJ3V3/component
  inst c : PANASONIC-100UF/component
  inst l : power-indicator-led(voltage)
  net (src.vdd, f.p[0])
  net (tvs.c, c.a, f.p[1], l.rail.vdd, dst.vdd)
  net (tvs.a, c.c, src.gnd, dst.gnd, l.rail.gnd)
  if voltage < 3.3 :
    port pow3v3 : power
    net (src.gnd, pow3v3.gnd)
    net (l.pow3v3, pow3v3)

pcb-module reset-button :
  port pow-vio : power
  pin reset
  inst b : OMRON-B3U-1000P/component
  ;pull down for now
  inst r : gen-res-cmp(10.0e3)[2]
  inst c : gen-cap-cmp(0.1e-6)
  net (r[0].p[2], pow-vio.vdd)
  net (b.p[2], r[0].p[1], r[1].p[1])
  net (r[1].p[2], c.p[1], reset)
  net (c.p[2], b.p[1], pow-vio.gnd)

public pcb-module clock-fanout-jumper-select (n:Int) :
  port vin : power
  public inst b : buffer-fanout(n)
  inst j : pull-up-jumper(n + 2)

  inst b-i : SN74LVC1G125/component[2]
  inst ext-sys-clk : sma-wrapper
  inst int-sys-clk : SiT8208/component
  inst r : gen-res-cmp(1.0e3)
  inst c : gen-cap-cmp(0.1e-6)[3]

  net (vin, b.vin, j.vin)
  net (vin.gnd, ext-sys-clk.gnd, int-sys-clk.GND, b-i[0].vs-, b-i[1].vs-, c[0].p[2], c[1].p[2], c[2].p[2])
  net (vin.vdd, int-sys-clk.VDD, b-i[0].vs+, b-i[1].vs+, r.p[1], c[0].p[1], c[1].p[1], c[2].p[1])
  short-trace(int-sys-clk.VDD, c[0].p[1])
  short-trace(b-i[0].vs+, c[1].p[1])
  short-trace(b-i[1].vs+, c[2].p[1])
  net (r.p[2], int-sys-clk.OE)

  net CLK-50MHz-EXT (ext-sys-clk.sig)
  net CLK-50MHz-INT (int-sys-clk.OUT)

  for i in 0 to n do :
    net (j.p[i], b.en[i])

  net (b-i[0].y, b-i[1].y, b.in)
  net (b-i[0].a, ext-sys-clk.sig)
  net (b-i[1].a, int-sys-clk.OUT)

  for i in 0 to 2 do : 
    net (b-i[i].oe, j.p[i + n])

public pcb-module diff-clk-fanout (n:Int) :
  port clkin : diff-pair
  port clkout : diff-pair[n]
  port vcc : power

  val n-chips = (n + 2 - 1) / 2

  inst b : SI53342/component[n-chips]
  inst c : gen-cap-cmp(1.0e-6)[n-chips]
  inst j : samtec-tsm/component(n * 2)
  ;val g-count = to-seq(0 to false)  
  for (i in 0 to n, n-idx in 0 to false) do :
    ;val n-idx = next(g-count)
    val g-name = Ref("CLK-%_-EN" % [n-idx])
    val [chip-idx, chip-ref, buffer-idx] = [i / 2, b[i / 2], i % 2]
    if buffer-idx == 0 :
      net (clkin.P, chip-ref.CLK0)
      net (clkin.N, chip-ref.CLK0b)
      net (chip-ref.GND, vcc.gnd, c[chip-idx].p[2])
      net (chip-ref.VDD, chip-ref.VDDOA, chip-ref.VDDOB, vcc.vdd, c[chip-idx].p[1])
      short-trace(chip-ref.VDD, c[chip-idx].p[1])
      net (chip-ref.Q2, clkout[i].P)
      net (chip-ref.Q2b, clkout[i].N)
      net g-name (j.p[i * 2], chip-ref.OEAb)
    else :
      net (chip-ref.Q3, clkout[i].P)
      net (chip-ref.Q3b, clkout[i].N)
      net g-name (j.p[i * 2], chip-ref.OEBb)
    net (j.p[i * 2 + 1], vcc.vdd)

pcb-module sma-wrapper :
  pin sig
  pin gnd

  inst conn : ocdb/johnson/142-0701-801/component
  place(conn) at loc(0.0, 0.0) on Top

  net (sig, conn.sig)
  net (gnd, conn.gnd)

public pcb-module diff-sma-wrapper (end-launch:True|False) :
  port diff : diff-pair
  pin gnd

  if end-launch == true :
   inst sma : ocdb/johnson/142-0701-801/component[2]
   place(sma[0]) at loc(0.0, 0.0) on Top
   place(sma[1]) at loc(11.25, 0.0) on Top (relative-to sma[0])
   net (diff.N, sma[0].sig)
   net (diff.P, sma[1].sig)
   net (gnd, sma[0].gnd)
   net (gnd, sma[1].gnd)

  else :
   inst sma : molex-732511350/component[2]
   place(sma[0]) at loc(0.0, 0.0) on Top
   place(sma[1]) at loc(7.5, 0.0) on Top (relative-to sma[0])
   net (diff.N, sma[0].sig)
   net (diff.P, sma[1].sig)
   net (gnd, sma[0].gnd)
   net (gnd, sma[1].gnd)

; JTAG connector
pcb-module arm-jtag-connector :
  port jtag : jtag()
  port pow-vio : power
  port pow-vout : power

  inst jtag-con : pin-header(10, 2)
  inst r-jp : gen-res-cmp(4.7e3)
  inst r-jtp : gen-res-cmp(10.0e3)[3]
  ; FIXME: This level shifter is not well matched to the problem and is overkill.
  ; It's a 4 channel with direction control.
  ; We need 5 channels, with fixed direction.
  inst ls : SN74AVC4T774RGYR/component[2]

  net (pow-vout.vdd, jtag-con.p[1], r-jtp[0].p[1], r-jtp[1].p[1], r-jp.p[1])
  net (pow-vio.gnd, jtag-con.p[3], jtag-con.p[5], jtag-con.p[9], r-jtp[2].p[1])

  ; Pullup resistors on connector
  net (jtag-con.p[2], r-jtp[0].p[2])
  net (jtag-con.p[4], r-jtp[2].p[2])
  net (jtag-con.p[8], r-jtp[1].p[2])
  net (jtag-con.p[10], r-jp.p[2])

  ;     Level shifter primary side connect to VIO
  ;     Power and enable
  for i in 0 to 2 do :
    net (ls[i].nOE,  pow-vio.gnd)
    net (ls[i].GND,  pow-vio.gnd)
    ; net (ls[i].PAD,  pow-vio.gnd)
    net (ls[i].VDDA, pow-vio.vdd)
    net (ls[i].VDDB, pow-vout.vdd)
  ;     Direction straps. Strap low gives B->A
  net (ls[0].DIR1,  pow-vio.gnd)
  net (ls[0].DIR2,  pow-vio.gnd)
  net (ls[0].DIR3,  pow-vio.gnd)
  net (ls[0].DIR4,  pow-vio.gnd)
  net (ls[1].DIR1,  pow-vio.vdd)
  net (ls[1].DIR2,  pow-vio.vdd)
  net (ls[1].DIR3,  pow-vio.vdd)
  net (ls[1].DIR4,  pow-vio.vdd)
  ;   Net dut side
  net (jtag.tck,   ls[0].A1)
  net (jtag.tdi,   ls[0].A2)
  net (jtag.trstn, ls[0].A3)
  net (jtag.tms,   ls[0].A4)
  net (jtag.tdo,   ls[1].A1)
  ;     Net connector side
  net tck   (jtag-con.p[4], ls[0].B1)
  net tdi   (jtag-con.p[8], ls[0].B2)
  net trstn (jtag-con.p[10], ls[0].B3)
  net tms   (jtag-con.p[2], ls[0].B4)
  net tdo   (jtag-con.p[6], ls[1].B1)
  ;     Strap unused pins low
  net (ls[1].A2, pow-vio.gnd)
  net (ls[1].A3, pow-vio.gnd)
  net (ls[1].A4, pow-vio.gnd)
  net (ls[1].B2, pow-vout.gnd)
  net (ls[1].B3, pow-vout.gnd)
  net (ls[1].B4, pow-vout.gnd)

  ; TODO: Add bypassing


; ====== Pad Collection Helpers ================================================
public pcb-module power-decouple (max-v:Double, c-ins:Double, c-high:Double) :
  port src : power
  port dst : power

  public inst c0 : gen-cap-cmp(c-high, 40.0, max-v)
  place(c0) on Top
  
  val [c1, c1n, c1p] = let :
    ; TODO: fix the difference between this and {gen-cap-cmp-insertion(c-ins, 40.0, max-v, true)}
    inst c1 : gen-cap-cmp(c-ins, 40.0, max-v)
    place(c1) on Top
    [c1, c1.p[1], c1.p[2]]

  net (c0.p[1], c1n, dst.gnd)
  net (c0.p[2], c1p, dst.vdd)
  short-trace(c0.p[2], c1p)     
  net (src.gnd, c1.p[1])
  net (src.vdd, c1.p[2])

public defn power-decouple (max-v:Double, c-ins:Double) :
  power-decouple(max-v, c-ins, 0.1)

public defn power-decouple (max-v:Double) :
  power-decouple(max-v, 1.0)

public defn power-decouple () :
  power-decouple(10.0)




;==== Module ===================================================================

val board-shape = Rectangle(4.0 * 25.4, 5.0 * 25.4)

pcb-module my-design :
  val tc-rows = 17

  inst dut : dut/my-dut
  inst hs-con : samtec-tle/component(tc-rows)[10]
  inst test-con : samtec-tle/component(tc-rows)[4]
  inst sys-clk-select : clock-fanout-jumper-select(16)

  inst r-b : reset-button

  ; Power protection
  inst power-con : molex-mini-fit-jr/component(10)
  net GND (power-con.p[1], dut.vin.gnd, dut.vddio.gnd)
  for i in 1 to 5 do :
    net (power-con.p[5], power-con.p[i])
  inst pc-3v3 : power-conditioning(3.3, 1.0)
  inst pc-1v8 : power-conditioning(1.8, 5.0)
  inst pc-0v9 : power-conditioning(0.9, 3.0)
  inst decouple-caps : power-decouple(4.0, 10.0e-3, 1.0e-3)[12]
  inst pc-0v8 : power-conditioning(0.8, 3.0)

  net (pc-3v3.dst, pc-1v8.pow3v3, pc-0v9.pow3v3, pc-0v8.pow3v3)
  net sup3v3 (power-con.p[10], pc-3v3.src.vdd)
  net sup1v8 (power-con.p[6], power-con.p[7] pc-1v8.src.vdd)
  net sup0v9 (power-con.p[8], pc-0v9.src.vdd)
  net sup0v8 (power-con.p[9], pc-0v8.src.vdd)
  net (power-con.p[1], pc-3v3.src.gnd, pc-1v8.src.gnd, pc-0v9.src.gnd, pc-0v8.src.gnd)

  net (dut.vin, dut.vddio, r-b.pow-vio, pc-1v8.dst, sys-clk-select.vin)
  net P0v8-FS (pc-0v8.dst.vdd, dut.p0v8.vdd)
  net P0v9-FS (pc-0v9.dst.vdd, dut.p0v9.vdd)
  net P1v8-FS (pc-1v8.dst.vdd)
  net P3v3-FS (pc-3v3.dst.vdd)

  ;Power decoupling
  for i in 0 to 4 do :
    net (dut.vddio, decouple-caps[i].dst)
    net (pc-1v8.dst, decouple-caps[i].src)
    place(decouple-caps[i]) on Bottom
  for i in 4 to 8 do :
    net (dut.p0v8, decouple-caps[i].dst)
    net (pc-0v8.dst, decouple-caps[i].src)
    place(decouple-caps[i]) on Bottom
  for i in 8 to 12 do :
    net (dut.p0v9, decouple-caps[i].dst)
    net (pc-0v9.dst, decouple-caps[i].src)
    place(decouple-caps[i]) on Bottom

  short-trace(decouple-caps[0].c0.p[2], dut.dut.p[143])
  short-trace(decouple-caps[1].c0.p[2], dut.dut.p[256])
  short-trace(decouple-caps[2].c0.p[2], dut.dut.p[217])
  short-trace(decouple-caps[3].c0.p[2], dut.dut.p[266])
  short-trace(decouple-caps[4].c0.p[2], dut.dut.p[294])
  short-trace(decouple-caps[5].c0.p[2], dut.dut.p[300])
  short-trace(decouple-caps[6].c0.p[2], dut.dut.p[306])
  short-trace(decouple-caps[7].c0.p[2], dut.dut.p[312])
  short-trace(decouple-caps[8].c0.p[2], dut.dut.p[297])
  short-trace(decouple-caps[9].c0.p[2], dut.dut.p[303])
  short-trace(decouple-caps[10].c0.p[2], dut.dut.p[309])
  short-trace(decouple-caps[11].c0.p[2], dut.dut.p[315])

  ; Ferric connector
  inst ferric : ocdb/phoenix/combicon-mc/component(3)
  ;inst r-fp : {gen-res-cmp(2.7e3)}[2]
  inst ls : level-shifter[2]
  
  net (ls[0].pwr-hv, ls[1].pwr-hv, pc-3v3.dst.vdd)
  net (ls[0].pwr-lv, ls[1].pwr-lv, pc-1v8.dst.vdd)
  net dut_pmb_clk (ls[0].sig-lv, dut.pmb.clk)
  net out_pmb_clk (ls[0].sig-hv, ferric.p[1])
  net dut_pmb_dat (ls[1].sig-lv, dut.pmb.dat)
  net out_pmb_dat (ls[1].sig-hv, ferric.p[2])
  net (ferric.p[3], pc-1v8.dst.gnd)

  ; JTAG connector w/ level shifter
  inst jt : arm-jtag-connector
  net (jt.jtag,     dut.jtag)
  net (jt.pow-vio,  pc-1v8.dst)
  net (jt.pow-vout, pc-3v3.dst)

  ;RS232 Interface
  inst t : TRS3122E/module
  inst rs232 : pin-header(3)
  net (rs232.p[1], power-con.p[2])
  net (rs232.p[2], t.rs232.tx)
  net (rs232.p[3], t.rs232.rx)
  net (dut.uart, t.urt)
  net (t.src-vio, pc-1v8.dst)

  ;LVDS pull resistors
  inst r-lvds : gen-res-cmp(11.8e3, 1.0)[16]

  for i in 0 to 16 do :
    net (dut.bank[i].LVDS_REXT, r-lvds[i].p[1])
    net (power-con.p[1], r-lvds[i].p[2])
    net (dut.bank[i].RESET_N, r-b.reset)
    net (dut.bank[i].SYS_CLK, sys-clk-select.b.out[i])



  ; Net to high speed connector
  defn connect-hs-cons (asgns:Tuple<Tuple<Int>>) :
    for (c in asgns, i in 0 to 4) do :
      for (b in c, j in 0 to 4) do :
        net (dut.bank[b].LVDS_REXT hs-con[i].p[9 * j + 0])
        net (dut.bank[b].AIB_A_TEST_IN hs-con[i].p[9 * j + 1])
        net (dut.bank[b].AIB_B_TEST_IN hs-con[i].p[9 * j + 2])
        net (dut.bank[b].AIB_B_TEST_OUT hs-con[i].p[9 * j + 3])
        net (dut.bank[b].AIB_A_CONFIG_DONE hs-con[i].p[9 * j + 4])
        net (dut.bank[b].SYS_CLK, sys-clk-select.b.out[b])
        net (dut.bank[b].OSC_A_DIV_CLK hs-con[i].p[9 * j + 5])
        net (dut.bank[b].OSC_B_DIV_CLK hs-con[i].p[9 * j + 6])
        net (dut.bank[b].AIB_A_TEST_OUT hs-con[i].p[9 * j + 7])
        net (dut.bank[b].AIB_B_CONFIG_DONE hs-con[i].p[9 * j + 8])
        net (dut.bank[b].RESET_N, r-b.reset)

  ;connect-hs-cons([[9 14 10 13]
  ;                [5 2 6 1]
  ;                [12 11 4 3]
  ;                [0 7 8 15]])

  net (hs-con[0].p[30], dut.dut.p[3])
  net (hs-con[1].p[30], dut.dut.p[4])
  net (hs-con[2].p[30], dut.dut.p[7])
  net (hs-con[0].p[28], dut.dut.p[8])
  net (hs-con[1].p[28], dut.dut.p[9])
  net (hs-con[2].p[28], dut.dut.p[10])
  net (hs-con[0].p[26], dut.dut.p[11])
  net (hs-con[1].p[26], dut.dut.p[12])
  net (hs-con[2].p[26], dut.dut.p[15])
  net (hs-con[0].p[24], dut.dut.p[16])
  net (hs-con[1].p[24], dut.dut.p[18])
  net (hs-con[2].p[24], dut.dut.p[20])
  net (hs-con[0].p[22], dut.dut.p[21])
  net (hs-con[1].p[22], dut.dut.p[22])
  net (hs-con[2].p[22], dut.dut.p[23])
  net (hs-con[0].p[20], dut.dut.p[24])
  net (hs-con[1].p[20], dut.dut.p[27])
  net (hs-con[2].p[20], dut.dut.p[28])
  net (hs-con[0].p[18], dut.dut.p[30])
  net (hs-con[1].p[18], dut.dut.p[32])
  net (hs-con[2].p[18], dut.dut.p[33])
  net (hs-con[0].p[16], dut.dut.p[34])
  net (hs-con[1].p[16], dut.dut.p[35])
  net (hs-con[2].p[16], dut.dut.p[36])
  net (hs-con[0].p[14], dut.dut.p[39])
  net (hs-con[1].p[14], dut.dut.p[42])
  net (hs-con[2].p[14], dut.dut.p[43])
  net (hs-con[0].p[12], dut.dut.p[44])
  net (hs-con[1].p[12], dut.dut.p[45])
  net (hs-con[2].p[12], dut.dut.p[46])
  net (hs-con[0].p[10], dut.dut.p[47])
  net (hs-con[1].p[10], dut.dut.p[48])
  net (hs-con[2].p[10], dut.dut.p[54])
  net (hs-con[0].p[8], dut.dut.p[56])
  net (hs-con[1].p[8], dut.dut.p[64])
  net (hs-con[2].p[8], dut.dut.p[69])
  net (hs-con[0].p[6], dut.dut.p[81])
  net (hs-con[1].p[6], dut.dut.p[83])
  net (hs-con[2].p[6], dut.dut.p[90])
  net (hs-con[0].p[4], dut.dut.p[91])
  net (hs-con[3].p[0], dut.dut.p[101])
  net (hs-con[4].p[0], dut.dut.p[102])
  net (hs-con[5].p[0], dut.dut.p[110])
  net (hs-con[3].p[2], dut.dut.p[111])
  net (hs-con[4].p[2], dut.dut.p[113])
  net (hs-con[5].p[2], dut.dut.p[128])
  net (hs-con[3].p[4], dut.dut.p[136])
  net (hs-con[4].p[4], dut.dut.p[141])
  net (hs-con[5].p[4], dut.dut.p[146])
  net (hs-con[3].p[6], dut.dut.p[148])
  net (hs-con[4].p[6], dut.dut.p[149])
  net (hs-con[5].p[6], dut.dut.p[151])
  net (hs-con[3].p[8], dut.dut.p[153])
  net (hs-con[4].p[8], dut.dut.p[154])
  net (hs-con[5].p[8], dut.dut.p[155])
  net (hs-con[3].p[10], dut.dut.p[156])
  net (hs-con[4].p[10], dut.dut.p[157])
  net (hs-con[5].p[10], dut.dut.p[160])
  net (hs-con[3].p[12], dut.dut.p[163])
  net (hs-con[4].p[12], dut.dut.p[164])
  net (hs-con[5].p[12], dut.dut.p[165])
  net (hs-con[3].p[14], dut.dut.p[166])
  net (hs-con[4].p[14], dut.dut.p[167])
  net (hs-con[5].p[14], dut.dut.p[168])
  net (hs-con[3].p[16], dut.dut.p[169])
  net (hs-con[4].p[16], dut.dut.p[171])
  net (hs-con[5].p[16], dut.dut.p[174])
  net (hs-con[3].p[18], dut.dut.p[175])
  net (hs-con[4].p[18], dut.dut.p[176])
  net (hs-con[5].p[18], dut.dut.p[177])
  net (hs-con[3].p[20], dut.dut.p[178])
  net (hs-con[4].p[20], dut.dut.p[179])
  net (hs-con[5].p[20], dut.dut.p[180])
  net (hs-con[3].p[22], dut.dut.p[182])
  net (hs-con[4].p[22], dut.dut.p[183])
  net (hs-con[5].p[22], dut.dut.p[185])
  net (hs-con[3].p[24], dut.dut.p[187])
  net (hs-con[4].p[24], dut.dut.p[188])
  net (hs-con[5].p[24], dut.dut.p[189])
  net (hs-con[3].p[26], dut.dut.p[190])
  net (hs-con[4].p[26], dut.dut.p[191])
  net (hs-con[9].p[0], dut.dut.p[194])
  net (hs-con[8].p[0], dut.dut.p[197])
  net (hs-con[9].p[2], dut.dut.p[198])
  net (hs-con[8].p[2], dut.dut.p[199])
  net (hs-con[9].p[4], dut.dut.p[200])
  net (hs-con[8].p[4], dut.dut.p[201])
  net (hs-con[9].p[6], dut.dut.p[202])
  net (hs-con[8].p[6], dut.dut.p[203])
  net (hs-con[9].p[8], dut.dut.p[206])
  net (hs-con[8].p[8], dut.dut.p[207])
  net (hs-con[9].p[10], dut.dut.p[208])
  net (hs-con[8].p[10], dut.dut.p[209])
  net (hs-con[9].p[12], dut.dut.p[210])
  net (hs-con[8].p[12], dut.dut.p[211])
  net (hs-con[9].p[14], dut.dut.p[214])
  net (hs-con[8].p[14], dut.dut.p[215])
  net (hs-con[9].p[16], dut.dut.p[216])
  net (hs-con[8].p[16], dut.dut.p[221])
  net (hs-con[9].p[18], dut.dut.p[222])
  net (hs-con[8].p[18], dut.dut.p[223])
  net (hs-con[9].p[20], dut.dut.p[224])
  net (hs-con[8].p[20], dut.dut.p[225])
  net (hs-con[9].p[22], dut.dut.p[226])
  net (hs-con[8].p[22], dut.dut.p[227])
  net (hs-con[9].p[24], dut.dut.p[228])
  net (hs-con[8].p[24], dut.dut.p[231])
  net (hs-con[9].p[26], dut.dut.p[233])
  net (hs-con[8].p[26], dut.dut.p[234])
  net (hs-con[9].p[28], dut.dut.p[236])
  net (hs-con[8].p[28], dut.dut.p[237])
  net (hs-con[9].p[30], dut.dut.p[238])
  net (hs-con[8].p[30], dut.dut.p[239])
  net (hs-con[9].p[0], dut.dut.p[240])
  net (hs-con[6].p[30], dut.dut.p[243])
  net (hs-con[7].p[30], dut.dut.p[246])
  net (hs-con[6].p[28], dut.dut.p[247])
  net (hs-con[7].p[28], dut.dut.p[248])
  net (hs-con[6].p[26], dut.dut.p[249])
  net (hs-con[7].p[26], dut.dut.p[250])
  net (hs-con[6].p[24], dut.dut.p[251])
  net (hs-con[7].p[24], dut.dut.p[252])
  net (hs-con[6].p[22], dut.dut.p[255])
  net (hs-con[7].p[22], dut.dut.p[258])
  net (hs-con[6].p[20], dut.dut.p[259])
  net (hs-con[7].p[20], dut.dut.p[260])
  net (hs-con[6].p[18], dut.dut.p[261])
  net (hs-con[7].p[18], dut.dut.p[262])
  net (hs-con[6].p[16], dut.dut.p[263])
  net (hs-con[7].p[16], dut.dut.p[264])
  net (hs-con[6].p[14], dut.dut.p[265])
  net (hs-con[7].p[14], dut.dut.p[270])
  net (hs-con[6].p[12], dut.dut.p[272])
  net (hs-con[7].p[12], dut.dut.p[273])
  net (hs-con[6].p[10], dut.dut.p[274])
  net (hs-con[7].p[10], dut.dut.p[275])
  net (hs-con[6].p[8], dut.dut.p[276])
  net (hs-con[7].p[8], dut.dut.p[277])
  net (hs-con[6].p[6], dut.dut.p[278])
  net (hs-con[7].p[6], dut.dut.p[280])
  net (hs-con[6].p[4], dut.dut.p[283])
  net (hs-con[7].p[4], dut.dut.p[286])
  net (hs-con[6].p[2], dut.dut.p[287])
  net (hs-con[7].p[2], dut.dut.p[288])
  net (hs-con[6].p[0], dut.dut.p[289])
  net (hs-con[7].p[0], dut.dut.p[290])
  net (hs-con[6].p[30], dut.dut.p[291])
  net (hs-con[7].p[30], dut.dut.p[292])
  net (test-con[2].p[30], dut.dut.p[50])
  net (test-con[3].p[30], dut.dut.p[51])
  net (test-con[2].p[28], dut.dut.p[52])
  net (test-con[3].p[28], dut.dut.p[53])
  net (test-con[2].p[26], dut.dut.p[58])
  net (test-con[3].p[26], dut.dut.p[59])
  net (test-con[2].p[24], dut.dut.p[60])
  net (test-con[3].p[24], dut.dut.p[61])
  net (test-con[2].p[22], dut.dut.p[62])
  net (test-con[3].p[22], dut.dut.p[63])
  net (test-con[2].p[20], dut.dut.p[65])
  net (test-con[3].p[20], dut.dut.p[66])
  net (test-con[2].p[18], dut.dut.p[67])
  net (test-con[3].p[18], dut.dut.p[68])
  net (test-con[2].p[16], dut.dut.p[71])
  net (test-con[3].p[16], dut.dut.p[72])
  net (test-con[2].p[14], dut.dut.p[73])
  net (test-con[3].p[14], dut.dut.p[74])
  net (test-con[2].p[12], dut.dut.p[75])
  net (test-con[3].p[12], dut.dut.p[76])
  net (test-con[2].p[10], dut.dut.p[77])
  net (test-con[3].p[10], dut.dut.p[78])
  net (test-con[2].p[8], dut.dut.p[79])
  net (test-con[3].p[8], dut.dut.p[80])
  net (test-con[2].p[6], dut.dut.p[85])
  net (test-con[3].p[6], dut.dut.p[86])
  net (test-con[2].p[4], dut.dut.p[87])
  net (test-con[3].p[4], dut.dut.p[88])
  net (test-con[2].p[2], dut.dut.p[93])
  net (test-con[3].p[2], dut.dut.p[94])
  net (test-con[2].p[0], dut.dut.p[95])
  net (test-con[3].p[0], dut.dut.p[96])
  net (test-con[0].p[0], dut.dut.p[97])
  net (test-con[1].p[0], dut.dut.p[98])
  net (test-con[0].p[2], dut.dut.p[99])
  net (test-con[1].p[2], dut.dut.p[100])
  net (test-con[0].p[4], dut.dut.p[105])
  net (test-con[1].p[4], dut.dut.p[106])
  net (test-con[0].p[6], dut.dut.p[107])
  net (test-con[1].p[6], dut.dut.p[108])
  net (test-con[0].p[8], dut.dut.p[115])
  net (test-con[1].p[8], dut.dut.p[116])
  net (test-con[0].p[10], dut.dut.p[117])
  net (test-con[1].p[10], dut.dut.p[118])
  net (test-con[0].p[12], dut.dut.p[119])
  net (test-con[1].p[12], dut.dut.p[120])
  net (test-con[0].p[14], dut.dut.p[121])
  net (test-con[1].p[14], dut.dut.p[122])
  net (test-con[0].p[16], dut.dut.p[123])
  net (test-con[1].p[16], dut.dut.p[124])
  net (test-con[0].p[18], dut.dut.p[125])
  net (test-con[1].p[18], dut.dut.p[126])
  net (test-con[0].p[20], dut.dut.p[129])
  net (test-con[1].p[20], dut.dut.p[130])
  net (test-con[0].p[22], dut.dut.p[131])
  net (test-con[1].p[22], dut.dut.p[132])
  net (test-con[0].p[24], dut.dut.p[134])
  net (test-con[1].p[24], dut.dut.p[135])
  net (test-con[0].p[26], dut.dut.p[137])
  net (test-con[1].p[26], dut.dut.p[138])
  net (test-con[0].p[28], dut.dut.p[139])
  net (test-con[1].p[28], dut.dut.p[140])
  net (test-con[0].p[30], dut.dut.p[253])
  net (test-con[1].p[30], dut.dut.p[254])

  for j in 0 to tc-rows do :
    for i in 0 to 4 do :
      net (power-con.p[1], test-con[i].p[j * 2 + 1])
    for h in 0 to 10 do :
      net (power-con.p[1], hs-con[h].p[j * 2 + 1])

  inst fc : diff-clk-fanout(8)
  inst clk-in : diff-sma-wrapper(true)
  net CLK-FAST (clk-in.diff, fc.clkin)
  net (fc.vcc, pc-1v8.dst)
  net (clk-in.gnd, pc-1v8.dst.gnd)

  for i in 0 to 8 do :
    net (dut.fast-clk[i], fc.clkout[i])

  place(hs-con[0]) at loc(0.0, -20.0, -90.0) on Top
  place(hs-con[1]) at loc(0.0, -28.0, -90.0) on Top
  place(hs-con[2]) at loc(0.0, -36.0, -90.0) on Top
  place(hs-con[3]) at loc(0.0, 20.0, 90.0) on Top
  place(hs-con[4]) at loc(0.0, 28.0, 90.0) on Top
  place(hs-con[5]) at loc(0.0, 36.0, 90.0) on Top
  place(hs-con[6]) at loc(22.0, 0.0, 0.0) on Top
  place(hs-con[7]) at loc(30.0, 0.0, 0.0) on Top
  place(hs-con[8]) at loc(-22.0, 0.0, 180.0) on Top
  place(hs-con[9]) at loc(-30.0, 0.0, 180.0) on Top
  place(dut) at loc(-7.9, -7.9) on Top
  place(test-con[0]) at loc(0.0, 44.0, 90.0) on Top
  place(test-con[1]) at loc(0.0, 52.0, 90.0) on Top
  place(test-con[2]) at loc(0.0, -44.0, -90.0) on Top
  place(test-con[3]) at loc(0.0, -52.0, -90.0) on Top

  schematic-group([fc clk-in]) = fc-clk-in
  schematic-group([dut decouple-caps r-lvds]) = dut
  schematic-group([pc-3v3 pc-1v8 pc-0v8 pc-0v9 power-con]) = power
  schematic-group([ferric ls]) = ind
  schematic-group([hs-con]) = hs-con
  schematic-group([jt]) = jtag
  schematic-group([t rs232]) = comm
  schematic-group([r-b]) = r-b
  schematic-group([test-con]) = test-con
  schematic-group([sys-clk-select]) = clk

  geom(GND) :
    copper-pour(LayerIndex(1), isolate = 0.13, rank = 0) = board-shape
    copper-pour(LayerIndex(3), isolate = 0.13, rank = 0) = board-shape
    copper-pour(LayerIndex(6), isolate = 0.13, rank = 0) = board-shape
    copper-pour(LayerIndex(8), isolate = 0.13, rank = 0) = board-shape

  geom(P1v8-FS) : 
    copper-pour(LayerIndex(2), isolate = 0.13, rank = 0) = board-shape
  geom(P3v3-FS) : 
    copper-pour(LayerIndex(7), isolate = 0.13, rank = 0) = board-shape

; ==========================================
; Configure the design, then run or check it
; ==========================================
defn run-design (circuit:Instantiable, run-checks?:True|False) :
  set-design-directory("chiplet-board-output")
  set-board(ocdb/defaults/default-board(ocdb/stackups/tempo-automation-10-layer-62-mil, board-shape))
  set-rules(ocdb/rules/tempo-automation-std-rules)

  var main-module = circuit
  if run-checks? :
    main-module = ocdb/generator-utils/run-final-passes(circuit) ; Analyze design with a pass
  
  set-main-module(main-module) ; Treat the provided module as a design, and compile it.
  
  if run-checks? :
    run-checks("checks.txt")
  else:  
    view-board()
    view-schematic()

; ====================================
; Compile the design, view the results
; ====================================
defn compile-design (circuit:Instantiable) :
  run-design(circuit, false)

; =====================
; Run the design checks
; =====================
defn check-design (circuit:Instantiable) :
  run-design(circuit, true)

; ====================
; Export design to CAD
; ====================
defn export-design () :
  set-paper(ANSI-A4)
  set-export-backend(`kicad)
  export-cad()

; ===================================
; Update CAD, keeping layout progress
; ===================================
defn update-design () :
  set-export-board?(false)
  export-design()

; =================
; Export BOM to tsv
; =================
defn export-bill-of-materials () :
  set-bom-vendors(ocdb/design-vars/APPROVED-DISTRIBUTOR-LIST)
  set-bom-design-quantity(ocdb/design-vars/DESIGN-QUANTITY)
  export-bom()

; ============
; Run the code
; ============
compile-design(my-design) ; ;make-chips-project()
export-design()
