#use-added-syntax(jitx)
defpackage ucie-demo :
  import core
  import math
  import collections
  import jitx
  import jitx/commands
  import ocdb/utils/defaults
  import ocdb/utils/generic-components
  import ocdb/utils/bundles
  import ocdb/utils/landpatterns
  import ocdb/utils/design-vars
  import ocdb/utils/generator-utils
  import ocdb/utils/checks
  import ocdb/utils/box-symbol
  import ocdb/utils/symbols
  import ocdb/manufacturers/rules
  import utils/time

  import ucie-rules
  import ucie-utils

; enable-spy()

val num-layers = 20
public val bump-pitch = 9.0e-3

public val num-cols = 3
public val num-rows = 3
public val s-offset = 1.25
public val board-shape = RoundedRectangle(to-double(num-cols) * s-offset, to-double(num-rows) * s-offset, 0.25)

defn is-even? (i:Int) :
  i % 2 == 0

pcb-module one-module (pitch:Double):
  inst x : ucie-utils/ucie-module(UCIe-Advanced, pitch)
  place(x) at loc(0.0, 0.0, 0.0) on Top

pcb-module one-retimer :
  inst x : ucie-retimer(bump-pitch)
  place(x) at loc(0.0, 0.0, 0.0) on Top

pcb-module single-switch :
  inst s : ucie-switch(bump-pitch)
  place(s) at loc(0.0, 0.0, 0.0) on Top

pcb-module simple-chiplet-system (num-modules:Int) :
  public inst x : ucie-utils/ucie-module(UCIe-Advanced, bump-pitch) ; [num-modules]
  public inst y : ucie-retimer(bump-pitch)
  public inst z : ucie-retimer(bump-pitch)
  public inst c : ucie-utils/ucie-module(UCIe-Advanced, bump-pitch) ; [num-modules]

  place(x) at loc(1.0 * property(x.width) / 2.0, 1.0 * property(x.height) / 2.0, 180.0) on Top
  ; place(y) at loc(-1.0 * property(y.a.width) / 2.0, 1.0 + -1.0 * property(y.a.height) / 2.0,   0.0) on Top
  place(y) at loc(0.0, 0.5,   0.0) on Top
  place(z) at loc(0.0, 2.0, 180.0) on Top
  place(c) at loc(-1.0 * property(c.width) / 2.0, 2.5, 0.0) on Top
  connect-ucie-module(UCIe-Advanced,   x, y.a)
  connect-ucie-module(UCIe-Advanced, y.b, z.b)
  connect-ucie-module(UCIe-Advanced, z.a,   c)
  
pcb-module ns-chiplet-system (num-modules:Int, pitch-y:Double) :
  if num-modules < 2 :
    fatal("Need at least 2 modules to build system.")

  public inst x : ucie-utils/ucie-module(UCIe-Advanced, bump-pitch)[2]
  place(x[0]) at loc( 1.0 * property(x[0].width) / 2.0, 1.0 * property(x[0].height) / 2.0, 180.0) on Top
  place(x[1]) at loc(-1.0 * property(x[1].width) / 2.0, (pitch-y + property(x[1].height)) * to-double(num-modules), 0.0) on Top

  val num-retimers = num-modules - 2
  if num-retimers == 0 :
    connect-ucie-module(UCIe-Advanced,   x[0], x[1])
  if num-retimers > 0 :
    public inst y : ucie-retimer(bump-pitch)[num-retimers]
    connect-ucie-module(UCIe-Advanced,   x[0], y[0].a)
    if (num-retimers % 2 == 0) :
      connect-ucie-module(UCIe-Advanced,   x[1], y[num-retimers - 1].a)
    else :
      connect-ucie-module(UCIe-Advanced,   x[1], y[num-retimers - 1].b)

    for c-index in 0 to num-retimers do:
      if is-even?(c-index) :
        place(y[c-index]) at loc( 0.0, (pitch-y + property(y[c-index].a.height)) * to-double(c-index + 1), 0.0) on Top
         if c-index > 0 :
          connect-ucie-module(UCIe-Advanced,   y[c-index - 1].a, y[c-index].a)
      else :
        place(y[c-index]) at loc( 0.0, (pitch-y + property(y[c-index].a.height)) * to-double(c-index + 1), 180.0) on Top
        connect-ucie-module(UCIe-Advanced,   y[c-index - 1].b, y[c-index].b)

pcb-module cardinal-chiplet-system (num-modules:Int, pitch-y:Double) :
  pin vdd 
  pin vddao 
  pin gnd

  if num-modules < 2 :
    fatal("Need at least 2 modules to build a system.")

  public inst x : ucie-utils/ucie-module(UCIe-Advanced, bump-pitch)[2]
  place(x[0]) at loc( 1.0 * property(x[0].width) / 2.0, 1.0 * property(x[0].height) / 2.0, 180.0) on Top
  place(x[1]) at loc(-1.0 * property(x[1].width) / 2.0, pitch-y * to-double(num-modules), 0.0) on Top

  net (vdd x[0].ucie.VCCIO x[1].ucie.VCCIO)
  net (gnd x[0].ucie.VSS x[1].ucie.VSS)
  net (vddao x[0].ucie.VCCAON x[1].ucie.VCCAON)

  val num-switches = num-modules - 2

  if num-switches == 0 :
    connect-ucie-module(UCIe-Advanced,   x[0], x[1])
  else :
    public inst y : ucie-switch(bump-pitch)[num-switches]
    connect-ucie-module(UCIe-Advanced,   x[0], y[0].s)
    connect-ucie-module(UCIe-Advanced,   x[1], y[num-switches - 1].n)

    for c-index in 0 to num-switches do:
      net (vdd y[c-index].vdd)
      net (gnd y[c-index].gnd)
      net (vddao y[c-index].vddao)
      place(y[c-index]) at loc( 0.0, (pitch-y + property(y[c-index].n.height)) * to-double(c-index + 1), 0.0) on Top
      if c-index > 0 :
        connect-ucie-module(UCIe-Advanced,   y[c-index - 1].n, y[c-index].s)


pcb-module array-chiplet-system (num-rows:Int, num-cols:Int, pitch:Double) :
  pin vdd 
  pin vddao 
  pin gnd

  if num-rows < 2 :
    fatal("Need at least 2 rows to build a system.")
  if num-cols < 2 :
    fatal("Need at least 2 columns to build a system.")

  public inst s : ucie-switch(bump-pitch)[num-rows * num-cols]

  for (c-loc in grid-locs(num-rows, num-cols, pitch, pitch), i in 0 to num-cols * num-rows) do:
    place(s[i]) at c-loc on Top
 
  for x in 0 to num-rows do:
    for y in 0 to num-cols do:
      val index = y + x * num-cols
      if y < num-cols - 1:
        connect-ucie-module(UCIe-Advanced, s[index].e, s[index + 1].w)
      if x < num-rows - 1:
        connect-ucie-module(UCIe-Advanced, s[index].s, s[index + num-cols].n)

pcb-module chiplet-design :
  ; inst chiplet : one-module(bump-pitch) 
  ; inst chiplet : one-retimer
  ; inst chiplet : single-switch
  ; inst chiplet :  simple-chiplet-system(3)
  ; inst chiplet : ns-chiplet-system(5, s-offset) 
  ; inst chiplet : cardinal-chiplet-system(5, s-offset) 
  inst chiplet : array-chiplet-system(num-rows, num-cols, s-offset)
  place(chiplet) at loc(0.0, 0.0) on Top

; ==========================================
; Configure the design, then run or check it
; ==========================================
defn run-design (circuit:Instantiable, run-checks?:True|False) :
  set-design-directory("ucie-output")
  set-board(ocdb/utils/defaults/default-board(num-layers, board-shape))
  set-rules(intel-build-up)

  var main-module = circuit
  if run-checks? :
    main-module = ocdb/utils/generator-utils/run-final-passes(circuit) ; Analyze design with a pass
  
  set-main-module(main-module) ; Treat the provided module as a design, and compile it.
  
  if run-checks? :
    run-checks("checks.txt")
  else:  
    view-board()
    view-schematic()
    ; export-design()

; code to add
; ====================
; Export design to CAD
; ====================
defn export-design () :
  set-paper(ANSI-A4)
  set-export-backend(`kicad)
  export-cad()

; ====================================
; Compile the design, view the results
; ====================================
defn compile-design (circuit:Instantiable) :
  run-design(circuit, false)

; =====================
; Run the design checks
; =====================
defn check-design (circuit:Instantiable) :
  run-design(circuit, true)

; ============
; Run the code
; ============
println $ get-time-string("%H:%M:%S")

compile-design(chiplet-design)
; compile-design(single-switch)

println $ get-time-string("%H:%M:%S")
